{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\adisa\\.conda\\envs\\ai\\lib\\site-packages\\torchaudio\\extension\\extension.py:13: UserWarning: torchaudio C++ extension is not available.\n",
      "  warnings.warn('torchaudio C++ extension is not available.')\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PyTorch Version:  1.8.1\n",
      "Torchvision Version:  0.9.1\n",
      "Torchaudio Version:  0.8.1\n"
     ]
    }
   ],
   "source": [
    "from PIL import Image\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib\n",
    "import glob\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import DataLoader, TensorDataset\n",
    "import torchvision\n",
    "import librosa\n",
    "import librosa.display\n",
    "from torchvision import datasets, models, transforms\n",
    "from torchvision.utils import make_grid\n",
    "import torchaudio\n",
    "from sklearn.model_selection import train_test_split\n",
    "import os\n",
    "import random\n",
    "import time\n",
    "import copy\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "from tqdm import tqdm\n",
    "import IPython.display as ipd\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "%matplotlib inline\n",
    "\n",
    "print(\"PyTorch Version: \",torch.__version__)\n",
    "print(\"Torchvision Version: \",torchvision.__version__)\n",
    "print(\"Torchaudio Version: \",torchaudio.__version__)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using 1 GPU(s) for training!\n"
     ]
    }
   ],
   "source": [
    "data_dir = \"./data\"\n",
    "batch_size = 128\n",
    "num_epochs = 10\n",
    "classes = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'backward', 'bed', 'bird', 'cat', 'dog', 'down', 'follow', 'forward', 'go', 'happy', 'house', 'learn', 'left', 'marvin', 'no', 'off', 'on', 'right', 'sheila', 'stop', 'tree', 'up', 'visual', 'wow', 'yes']\n",
    "num_classes = len(classes)\n",
    "\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "n_gpu = 1\n",
    "\n",
    "if(n_gpu > 0):\n",
    "    print(\"Using {} GPU(s) for training!\".format(n_gpu))\n",
    "else:\n",
    "    print(\"Using CPU for training!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Speech commands dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load, explore and augment data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from torchaudio.datasets import SPEECHCOMMANDS\n",
    "import os\n",
    "\n",
    "class SubsetSC(SPEECHCOMMANDS):\n",
    "    def __init__(self, subset: str = None):\n",
    "        super().__init__(\"./\", download=True)\n",
    "\n",
    "        def load_list(filename):\n",
    "            filepath = os.path.join(self._path, filename)\n",
    "            with open(filepath) as fileobj:\n",
    "                return [os.path.join(self._path, line.strip()) for line in fileobj]\n",
    "\n",
    "        if subset == \"validation\":\n",
    "            self._walker = load_list(\"validation_list.txt\")\n",
    "        elif subset == \"testing\":\n",
    "            self._walker = load_list(\"testing_list.txt\")\n",
    "        elif subset == \"training\":\n",
    "            excludes = load_list(\"validation_list.txt\") + load_list(\"testing_list.txt\")\n",
    "            excludes = set(excludes)\n",
    "            self._walker = [w for w in self._walker if w not in excludes]\n",
    "\n",
    "\n",
    "# Create training and testing split of the data. We do not use validation in this tutorial.\n",
    "train_set = SubsetSC(\"training\")\n",
    "test_set = SubsetSC(\"testing\")\n",
    "val_set = SubsetSC(\"validation\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def label_to_index(word):\n",
    "    # Return the position of the word in labels\n",
    "    return torch.tensor(classes.index(word))\n",
    "\n",
    "def index_to_label(index):\n",
    "    # Return the word corresponding to the index in labels\n",
    "    # This is the inverse of label_to_index\n",
    "    return classes[index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of waveform: torch.Size([1, 16000])\n",
      "Sample rate of waveform: 16000\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "waveform, sample_rate, label, speaker_id, utterance_number = train_set[4]\n",
    "num_channels = waveform.shape[0]\n",
    "print(\"Shape of waveform: {}\".format(waveform.size()))\n",
    "print(\"Sample rate of waveform: {}\".format(sample_rate))\n",
    "\n",
    "plt.plot(waveform.t().numpy());"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data loaded successfully!\n"
     ]
    }
   ],
   "source": [
    "def pad_sequence(batch):\n",
    "    # Make all tensor in a batch the same length by padding with zeros\n",
    "    batch = [item.t() for item in batch]\n",
    "    batch = torch.nn.utils.rnn.pad_sequence(batch, batch_first=True, padding_value=0.)\n",
    "    return batch.permute(0, 2, 1)\n",
    "\n",
    "def collate_fn(batch):\n",
    "\n",
    "    # A data tuple has the form:\n",
    "    # waveform, sample_rate, label, speaker_id, utterance_number\n",
    "\n",
    "    tensors, targets = [], []\n",
    "\n",
    "    # Gather in lists, and encode labels as indices\n",
    "    for waveform, _, label, *_ in batch:\n",
    "        tensors += [waveform]\n",
    "        targets += [label_to_index(label)]\n",
    "\n",
    "    # Group the list of tensors into a batched tensor\n",
    "    tensors = pad_sequence(tensors)\n",
    "    targets = torch.stack(targets)\n",
    "\n",
    "    return tensors, targets\n",
    "\n",
    "# Transformations\n",
    "transform = torchaudio.transforms.Resample(orig_freq=sample_rate, new_freq=8000)\n",
    "\n",
    "# Create datasets\n",
    "datasets_dict = {\n",
    "    \"train\": train_set,\n",
    "    \"test\": test_set,\n",
    "    \"val\": val_set,\n",
    "}\n",
    "\n",
    "# Create dataloaders\n",
    "dataloaders_dict = {mode: DataLoader(datasets_dict[mode], batch_size=batch_size, \n",
    "                                                   shuffle=True, collate_fn=collate_fn, pin_memory=False, num_workers=0) \n",
    "                    for mode in ['train', 'test', 'val']}\n",
    "\n",
    "print(\"Data loaded successfully!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of audio samples:  126815\n",
      "Samples in trainig set:  105829\n",
      "Samples in test set:  11005\n",
      "Samples in validation set:  9981\n"
     ]
    }
   ],
   "source": [
    "print(\"Number of audio samples: \", len(train_set) + len(test_set) + len(val_set))\n",
    "print(\"Samples in trainig set: \", len(train_set))\n",
    "print(\"Samples in test set: \", len(test_set))\n",
    "print(\"Samples in validation set: \", len(val_set))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2592x1152 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.rcParams['font.size'] = 20\n",
    "num_per_class = np.unique([x[2] for x in train_set], return_counts=True)\n",
    "plt.rcParams['figure.figsize'] = (36, 16)\n",
    "plt.bar(num_per_class[0], num_per_class[1], label=\"Test set\")\n",
    "plt.xticks(np.arange(len(num_per_class[0])))\n",
    "plt.xlabel('Class')\n",
    "plt.ylabel('Count')\n",
    "plt.grid('on', axis='y')\n",
    "\n",
    "num_per_class = np.unique([x[2] for x in test_set], return_counts=True)\n",
    "plt.rcParams['figure.figsize'] = (32, 16)\n",
    "plt.bar(num_per_class[0], num_per_class[1], label=\"Test set\")\n",
    "plt.xticks(np.arange(len(num_per_class[0])))\n",
    "plt.xlabel('Class')\n",
    "plt.ylabel('Count')\n",
    "plt.grid('on', axis='y')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "plt.rcParams['font.size'] = 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "                <audio  controls=\"controls\" >\n",
       "                    <source src=\"data:audio/wav;base64,\" type=\"audio/wav\" />\n",
       "                    Your browser does not support the audio element.\n",
       "                </audio>\n",
       "              "
      ],
      "text/plain": [
       "<IPython.lib.display.Audio object>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lowerin sampling rate to 8000, doesn't really affect accuracy, lowers number of samples\n",
    "new_sample_rate = 8000\n",
    "transform = torchaudio.transforms.Resample(orig_freq=sample_rate, new_freq=new_sample_rate)\n",
    "transformed = transform(waveform)\n",
    "\n",
    "ipd.Audio(transformed.numpy(), rate=new_sample_rate)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Train CNN model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M5(\n",
      "  (conv1): Conv1d(1, 32, kernel_size=(80,), stride=(16,))\n",
      "  (bn1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "  (pool1): MaxPool1d(kernel_size=4, stride=4, padding=0, dilation=1, ceil_mode=False)\n",
      "  (conv2): Conv1d(32, 32, kernel_size=(3,), stride=(1,))\n",
      "  (bn2): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "  (pool2): MaxPool1d(kernel_size=4, stride=4, padding=0, dilation=1, ceil_mode=False)\n",
      "  (conv3): Conv1d(32, 64, kernel_size=(3,), stride=(1,))\n",
      "  (bn3): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "  (pool3): MaxPool1d(kernel_size=4, stride=4, padding=0, dilation=1, ceil_mode=False)\n",
      "  (conv4): Conv1d(64, 64, kernel_size=(3,), stride=(1,))\n",
      "  (bn4): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "  (pool4): MaxPool1d(kernel_size=4, stride=4, padding=0, dilation=1, ceil_mode=False)\n",
      "  (fc1): Linear(in_features=64, out_features=35, bias=True)\n",
      ")\n"
     ]
    }
   ],
   "source": [
    "class M5(nn.Module):\n",
    "    def __init__(self, n_input=1, n_output=35, stride=16, n_channel=32):\n",
    "        super().__init__()\n",
    "        self.conv1 = nn.Conv1d(n_input, n_channel, kernel_size=80, stride=stride)\n",
    "        self.bn1 = nn.BatchNorm1d(n_channel)\n",
    "        self.pool1 = nn.MaxPool1d(4)\n",
    "        self.conv2 = nn.Conv1d(n_channel, n_channel, kernel_size=3)\n",
    "        self.bn2 = nn.BatchNorm1d(n_channel)\n",
    "        self.pool2 = nn.MaxPool1d(4)\n",
    "        self.conv3 = nn.Conv1d(n_channel, 2 * n_channel, kernel_size=3)\n",
    "        self.bn3 = nn.BatchNorm1d(2 * n_channel)\n",
    "        self.pool3 = nn.MaxPool1d(4)\n",
    "        self.conv4 = nn.Conv1d(2 * n_channel, 2 * n_channel, kernel_size=3)\n",
    "        self.bn4 = nn.BatchNorm1d(2 * n_channel)\n",
    "        self.pool4 = nn.MaxPool1d(4)\n",
    "        self.fc1 = nn.Linear(2 * n_channel, n_output)\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = self.conv1(x)\n",
    "        x = F.relu(self.bn1(x))\n",
    "        x = self.pool1(x)\n",
    "        x = self.conv2(x)\n",
    "        x = F.relu(self.bn2(x))\n",
    "        x = self.pool2(x)\n",
    "        x = self.conv3(x)\n",
    "        x = F.relu(self.bn3(x))\n",
    "        x = self.pool3(x)\n",
    "        x = self.conv4(x)\n",
    "        x = F.relu(self.bn4(x))\n",
    "        x = self.pool4(x)\n",
    "        x = F.avg_pool1d(x, x.shape[-1])\n",
    "        x = x.permute(0, 2, 1)\n",
    "        x = self.fc1(x)\n",
    "        return F.log_softmax(x, dim=2)\n",
    "\n",
    "\n",
    "def initialize_model(num_classes):\n",
    "    \"\"\" Using M5 model \"\"\"\n",
    "    model = M5(n_input=num_channels, n_output=num_classes)\n",
    "    \n",
    "    if n_gpu > 1:  \n",
    "        print(\"Paralel computing!\")\n",
    "        model = nn.DataParallel(model) # paralelizam\n",
    "    return model\n",
    "\n",
    "# CNN model initialization\n",
    "model = initialize_model(num_classes)\n",
    "model = model.to(device)\n",
    "print(model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_model(model, dataloaders, criterion, optimizer, lr_scheduler, num_epochs=25):\n",
    "    start = time.time()\n",
    "\n",
    "    val_acc_history = []\n",
    "    val_loss_history = []\n",
    "    train_acc_history = []\n",
    "    train_loss_history = []\n",
    "    \n",
    "    best_model = copy.deepcopy(model.state_dict())\n",
    "    best_acc = 0.0\n",
    "    \n",
    "    for epoch in range(num_epochs):\n",
    "        print('Epoch {}/{}'.format(epoch+1, num_epochs))\n",
    "        print('-' * 10)\n",
    "\n",
    "        for phase in ['train', 'val']:\n",
    "            if phase == 'train':\n",
    "                model.train()  # training mode\n",
    "            else:\n",
    "                model.eval()   # test mode\n",
    "\n",
    "            running_loss = 0.0\n",
    "            running_corrects = 0\n",
    "\n",
    "            # Iterate through dataset\n",
    "            for inputs, labels in dataloaders[phase]:\n",
    "                inputs = inputs.to(device)\n",
    "                labels = labels.to(device)\n",
    "                \n",
    "                # apply transform\n",
    "                inputs = transform(inputs)\n",
    "                optimizer.zero_grad()\n",
    "\n",
    "                # forward phase\n",
    "                with torch.set_grad_enabled(phase == 'train'):\n",
    "                    # calculate loss and output from model\n",
    "                    outputs = model(inputs)\n",
    "                    loss = criterion(outputs.squeeze(), labels)\n",
    "\n",
    "                    if(n_gpu > 1):\n",
    "                        loss = loss.mean()\n",
    "                    _, preds = torch.max(outputs.squeeze(), 1)\n",
    "\n",
    "                    # backward phase if training \n",
    "                    if phase == 'train':\n",
    "                        loss.backward()\n",
    "                        optimizer.step()\n",
    "\n",
    "                # statistics\n",
    "                running_loss += loss.item() * inputs.size(0)\n",
    "                running_corrects += torch.sum(preds == labels.data)\n",
    "            \n",
    "            epoch_loss = running_loss / len(dataloaders[phase].dataset)\n",
    "            epoch_acc = running_corrects.double() / len(dataloaders[phase].dataset)\n",
    "            \n",
    "            print('{} Loss: {:.4f} Acc: {:.4f}'.format(phase, epoch_loss, epoch_acc))\n",
    "            \n",
    "            # lower learning rate if you get worse accuracy on validation set\n",
    "            if phase == 'val' and epoch > 0 and epoch_acc < val_acc_history[-1]:\n",
    "                lr_scheduler.step()\n",
    "                \n",
    "            # deep copy best model\n",
    "            if phase == 'val' and epoch_acc > best_acc:\n",
    "                best_acc = epoch_acc\n",
    "                best_model = copy.deepcopy(model.state_dict())\n",
    "                \n",
    "            if phase == 'val':\n",
    "                val_acc_history.append(epoch_acc)\n",
    "                val_loss_history.append(epoch_loss)\n",
    "            else:\n",
    "                train_acc_history.append(epoch_acc)\n",
    "                train_loss_history.append(epoch_loss)\n",
    "            if phase == 'val' and epoch%5 == 0:\n",
    "                MODEL_PATH = \"./model/m5_multigpu_epoch_{}.pt\".format(epoch)\n",
    "                if not os.path.exists(os.path.dirname(MODEL_PATH)):\n",
    "                    os.makedirs(os.path.dirname(MODEL_PATH))\n",
    "                torch.save(model.state_dict(), MODEL_PATH)\n",
    "                    \n",
    "        print()\n",
    "\n",
    "    time_elapsed = time.time() - start\n",
    "    print('Training finished in: {:.0f}m {:.0f}s'.format(time_elapsed // 60, time_elapsed % 60))\n",
    "    print('Best accuracy: {:4f}'.format(best_acc))\n",
    "\n",
    "    # loading best model\n",
    "    model.load_state_dict(best_model)\n",
    "    return model, val_acc_history, val_loss_history, train_acc_history, train_loss_history"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Optimizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "params_to_update = model.parameters()\n",
    "optimizer = optim.Adam(params_to_update)\n",
    "\n",
    "decay_rate = 0.95\n",
    "lr_scheduler = optim.lr_scheduler.ExponentialLR(optimizer=optimizer, gamma=decay_rate)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "----------\n",
      "train Loss: 1.3625 Acc: 0.6171\n",
      "val Loss: 1.1093 Acc: 0.6692\n",
      "\n",
      "Epoch 2/30\n",
      "----------\n",
      "train Loss: 0.9174 Acc: 0.7364\n",
      "val Loss: 0.7640 Acc: 0.7786\n",
      "\n",
      "Epoch 3/30\n",
      "----------\n",
      "train Loss: 0.7760 Acc: 0.7749\n",
      "val Loss: 0.7966 Acc: 0.7601\n",
      "\n",
      "Epoch 4/30\n",
      "----------\n",
      "train Loss: 0.6852 Acc: 0.8023\n",
      "val Loss: 0.6159 Acc: 0.8238\n",
      "\n",
      "Epoch 5/30\n",
      "----------\n",
      "train Loss: 0.6349 Acc: 0.8138\n",
      "val Loss: 0.5423 Acc: 0.8457\n",
      "\n",
      "Epoch 6/30\n",
      "----------\n",
      "train Loss: 0.5971 Acc: 0.8256\n",
      "val Loss: 0.5277 Acc: 0.8438\n",
      "\n",
      "Epoch 7/30\n",
      "----------\n",
      "train Loss: 0.5600 Acc: 0.8354\n",
      "val Loss: 0.4502 Acc: 0.8719\n",
      "\n",
      "Epoch 8/30\n",
      "----------\n",
      "train Loss: 0.5360 Acc: 0.8422\n",
      "val Loss: 0.4818 Acc: 0.8584\n",
      "\n",
      "Epoch 9/30\n",
      "----------\n",
      "train Loss: 0.5123 Acc: 0.8485\n",
      "val Loss: 0.4903 Acc: 0.8558\n",
      "\n",
      "Epoch 10/30\n",
      "----------\n",
      "train Loss: 0.4920 Acc: 0.8535\n",
      "val Loss: 0.4182 Acc: 0.8818\n",
      "\n",
      "Epoch 11/30\n",
      "----------\n",
      "train Loss: 0.4778 Acc: 0.8578\n",
      "val Loss: 0.4067 Acc: 0.8775\n",
      "\n",
      "Epoch 12/30\n",
      "----------\n",
      "train Loss: 0.4628 Acc: 0.8632\n",
      "val Loss: 0.3652 Acc: 0.8931\n",
      "\n",
      "Epoch 13/30\n",
      "----------\n",
      "train Loss: 0.4507 Acc: 0.8651\n",
      "val Loss: 0.3869 Acc: 0.8847\n",
      "\n",
      "Epoch 14/30\n",
      "----------\n",
      "train Loss: 0.4375 Acc: 0.8696\n",
      "val Loss: 0.3581 Acc: 0.8928\n",
      "\n",
      "Epoch 15/30\n",
      "----------\n",
      "train Loss: 0.4288 Acc: 0.8729\n",
      "val Loss: 0.3617 Acc: 0.8918\n",
      "\n",
      "Epoch 16/30\n",
      "----------\n",
      "train Loss: 0.4204 Acc: 0.8747\n",
      "val Loss: 0.3704 Acc: 0.8923\n",
      "\n",
      "Epoch 17/30\n",
      "----------\n",
      "train Loss: 0.4135 Acc: 0.8773\n",
      "val Loss: 0.3336 Acc: 0.8988\n",
      "\n",
      "Epoch 18/30\n",
      "----------\n",
      "train Loss: 0.4075 Acc: 0.8778\n",
      "val Loss: 0.3522 Acc: 0.8933\n",
      "\n",
      "Epoch 19/30\n",
      "----------\n",
      "train Loss: 0.3979 Acc: 0.8808\n",
      "val Loss: 0.3141 Acc: 0.9060\n",
      "\n",
      "Epoch 20/30\n",
      "----------\n",
      "train Loss: 0.3915 Acc: 0.8828\n",
      "val Loss: 0.3160 Acc: 0.9073\n",
      "\n",
      "Epoch 21/30\n",
      "----------\n",
      "train Loss: 0.3874 Acc: 0.8835\n",
      "val Loss: 0.3190 Acc: 0.9039\n",
      "\n",
      "Epoch 22/30\n",
      "----------\n",
      "train Loss: 0.3788 Acc: 0.8857\n",
      "val Loss: 0.3176 Acc: 0.9021\n",
      "\n",
      "Epoch 23/30\n",
      "----------\n",
      "train Loss: 0.3717 Acc: 0.8883\n",
      "val Loss: 0.2905 Acc: 0.9142\n",
      "\n",
      "Epoch 24/30\n",
      "----------\n",
      "train Loss: 0.3670 Acc: 0.8896\n",
      "val Loss: 0.3013 Acc: 0.9084\n",
      "\n",
      "Epoch 25/30\n",
      "----------\n",
      "train Loss: 0.3603 Acc: 0.8917\n",
      "val Loss: 0.2869 Acc: 0.9134\n",
      "\n",
      "Epoch 26/30\n",
      "----------\n",
      "train Loss: 0.3595 Acc: 0.8914\n",
      "val Loss: 0.2976 Acc: 0.9126\n",
      "\n",
      "Epoch 27/30\n",
      "----------\n",
      "train Loss: 0.3526 Acc: 0.8926\n",
      "val Loss: 0.2734 Acc: 0.9171\n",
      "\n",
      "Epoch 28/30\n",
      "----------\n",
      "train Loss: 0.3492 Acc: 0.8943\n"
     ]
    }
   ],
   "source": [
    "criterion = F.nll_loss\n",
    "\n",
    "# Treniranje\n",
    "model, val_acc_history, val_loss_history, train_acc_history, train_loss_history = train_model(model, dataloaders_dict, criterion, optimizer, \n",
    "                                             lr_scheduler, num_epochs=30)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load/Save model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<All keys matched successfully>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MODEL_PATH = \"./model/m5_multigpu_best_30_epochs.pt\"\n",
    "#if not os.path.exists(os.path.dirname(MODEL_PATH)):\n",
    "#    os.makedirs(os.path.dirname(MODEL_PATH))\n",
    "#torch.save(model.state_dict(), MODEL_PATH)\n",
    "model.load_state_dict(torch.load(MODEL_PATH))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_acc_history = [torch.Tensor.cpu(x).numpy() for x in train_acc_history]\n",
    "val_acc_history = [torch.Tensor.cpu(x).numpy() for x in val_acc_history]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save/load loss and accuracy history arrray\n",
    "load = True\n",
    "if(load):\n",
    "    train_acc_history = np.loadtxt(\"./model/m5_multigpu_30_epochs_tr_acc.txt\")\n",
    "    train_loss_history = np.loadtxt(\"./model/m5_multigpu_30_epochs_tr_loss.txt\")\n",
    "    val_acc_history = np.loadtxt(\"./model/m5_multigpu_30_epochs_val_acc.txt\")\n",
    "    val_loss_history = np.loadtxt(\"./model/m5_multigpu_30_epochs_val_loss.txt\")\n",
    "else:\n",
    "    np.savetxt(\"./model/m5_multigpu_30_epochs_tr_acc1.txt\", train_acc_history)\n",
    "    np.savetxt(\"./model/m5_multigpu_30_epochs_tr_loss1.txt\", train_loss_history)\n",
    "    np.savetxt(\"./model/m5_multigpu_30_epochs_val_acc1.txt\", val_acc_history)\n",
    "    np.savetxt(\"./model/m5_multigpu_30_epochs_val_loss1.txt\", val_loss_history)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loss and accuracy history during training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title('Loss history')\n",
    "plt.plot(train_loss_history)\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.xticks(range(0,len(train_loss_history)))\n",
    "plt.gcf().set_size_inches(15, 6)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title('Accuracy history')\n",
    "plt.plot(train_acc_history)\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.xticks(range(0,len(train_acc_history)))\n",
    "plt.gcf().set_size_inches(15, 6)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Testing the model on test set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([128, 1, 8000])\n",
      "torch.Size([128])\n",
      "torch.Size([128])\n",
      "torch.Size([128, 1, 35])\n"
     ]
    },
    {
     "ename": "ZeroDivisionError",
     "evalue": "division by zero",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mZeroDivisionError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-116-e9b623f00b50>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m print('Model accuracy ' + str(total) + ' test audios: %.2f %%' % (\n\u001b[0;32m---> 27\u001b[0;31m     100 * correct / total))\n\u001b[0m\u001b[1;32m     28\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m \u001b[0minference_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minference_time\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'float64'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mZeroDivisionError\u001b[0m: division by zero"
     ]
    }
   ],
   "source": [
    "correct = 0\n",
    "total = 0\n",
    "inference_time = []\n",
    "model.eval()\n",
    "with torch.no_grad():\n",
    "    for inputs, labels in dataloaders_dict[\"test\"]:\n",
    "        \n",
    "        inputs = inputs.to(device)\n",
    "        inputs = transform(inputs)\n",
    "        labels = labels.to(device)\n",
    "        print(inputs.shape)\n",
    "        print(labels.shape)\n",
    "        \n",
    "        start = time.time()\n",
    "        outputs = model(inputs)\n",
    "        _, predicted = torch.max(outputs.squeeze(), 1)\n",
    "        print(predicted.shape)\n",
    "        print(outputs.shape)\n",
    "        break\n",
    "        \n",
    "        inference_time.append((time.time() - start) / labels.size(0))\n",
    "        \n",
    "        total += labels.size(0)\n",
    "        correct += (predicted == labels).sum().item()\n",
    "        \n",
    "print('Model accuracy ' + str(total) + ' test audios: %.2f %%' % (\n",
    "    100 * correct / total))\n",
    "\n",
    "inference_time = np.mean(inference_time, dtype='float64')\n",
    "print('Average inference time: {:.0f} microseconds'.format(inference_time * 1e6))\n",
    "\n",
    "print(\"Number of wrong predictions: \" + str(total - correct) + \" / \" + str(total))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [],
   "source": [
    "custom_set = []\n",
    "labels = []\n",
    "path = \"./SpeechCommands/custom/*\"\n",
    "for file in glob.glob(path):\n",
    "    audio = librosa.load(file, sr=16000)\n",
    "    label = os.path.basename(file)[0]\n",
    "    custom_set.append(torch.tensor(audio[0].reshape(1, audio[0].shape[0])))\n",
    "    labels.append(int(label))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model accuracy 10 test audios: 100.00 %\n",
      "Average inference time: nan microseconds\n",
      "Number of wrong predictions: 0 / 10\n"
     ]
    }
   ],
   "source": [
    "correct = 0\n",
    "total = 0\n",
    "model.eval()\n",
    "with torch.no_grad():\n",
    "    for inputs, label in zip(custom_set, labels):\n",
    "        inputs = inputs.reshape((1, inputs.shape[0], inputs.shape[1]))\n",
    "        inputs = inputs.to(device)\n",
    "        inputs = transform(inputs)\n",
    "        \n",
    "        outputs = model(inputs)\n",
    "        _, predicted = torch.max(outputs.flatten(), 0)\n",
    "        predicted = torch.Tensor.cpu(predicted).numpy()\n",
    "        \n",
    "        total += 1\n",
    "        correct += (predicted == label)\n",
    "        \n",
    "print('Model accuracy ' + str(total) + ' test audios: %.2f %%' % (\n",
    "    100 * correct / total))\n",
    "\n",
    "inference_time = np.mean(inference_time, dtype='float64')\n",
    "print('Average inference time: {:.0f} microseconds'.format(inference_time * 1e6))\n",
    "\n",
    "print(\"Number of wrong predictions: \" + str(total - correct) + \" / \" + str(total))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(dataloaders_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "./SpeechCommands/custom\\0_adisa.wav\n",
      "./SpeechCommands/custom\\1_adisa.wav\n",
      "./SpeechCommands/custom\\2_adisa.wav\n",
      "./SpeechCommands/custom\\3_adisa.wav\n",
      "./SpeechCommands/custom\\4_adisa.wav\n",
      "./SpeechCommands/custom\\5_adisa.wav\n",
      "./SpeechCommands/custom\\6_adisa.wav\n",
      "./SpeechCommands/custom\\7_adisa.wav\n",
      "./SpeechCommands/custom\\8_adisa.wav\n",
      "./SpeechCommands/custom\\9_adisa.wav\n",
      "label:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
      "predicted:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[array(9, dtype=int64)]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from PIL import Image\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib\n",
    "import glob\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import torch.optim as optim\n",
    "import librosa\n",
    "import os\n",
    "import random\n",
    "import time\n",
    "import copy\n",
    "import numpy as np\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "\n",
    "def predict_class():\n",
    "\n",
    "    class M5(nn.Module):\n",
    "        def __init__(self, n_input=1, n_output=35, stride=16, n_channel=32):\n",
    "            super().__init__()\n",
    "            self.conv1 = nn.Conv1d(n_input, n_channel, kernel_size=80, stride=stride)\n",
    "            self.bn1 = nn.BatchNorm1d(n_channel)\n",
    "            self.pool1 = nn.MaxPool1d(4)\n",
    "            self.conv2 = nn.Conv1d(n_channel, n_channel, kernel_size=3)\n",
    "            self.bn2 = nn.BatchNorm1d(n_channel)\n",
    "            self.pool2 = nn.MaxPool1d(4)\n",
    "            self.conv3 = nn.Conv1d(n_channel, 2 * n_channel, kernel_size=3)\n",
    "            self.bn3 = nn.BatchNorm1d(2 * n_channel)\n",
    "            self.pool3 = nn.MaxPool1d(4)\n",
    "            self.conv4 = nn.Conv1d(2 * n_channel, 2 * n_channel, kernel_size=3)\n",
    "            self.bn4 = nn.BatchNorm1d(2 * n_channel)\n",
    "            self.pool4 = nn.MaxPool1d(4)\n",
    "            self.fc1 = nn.Linear(2 * n_channel, n_output)\n",
    "\n",
    "        def forward(self, x):\n",
    "            x = self.conv1(x)\n",
    "            x = F.relu(self.bn1(x))\n",
    "            x = self.pool1(x)\n",
    "            x = self.conv2(x)\n",
    "            x = F.relu(self.bn2(x))\n",
    "            x = self.pool2(x)\n",
    "            x = self.conv3(x)\n",
    "            x = F.relu(self.bn3(x))\n",
    "            x = self.pool3(x)\n",
    "            x = self.conv4(x)\n",
    "            x = F.relu(self.bn4(x))\n",
    "            x = self.pool4(x)\n",
    "            x = F.avg_pool1d(x, x.shape[-1])\n",
    "            x = x.permute(0, 2, 1)\n",
    "            x = self.fc1(x)\n",
    "            return F.log_softmax(x, dim=2)\n",
    "\n",
    "    def initialize_model(num_classes):\n",
    "        \"\"\" Using M5 model \"\"\"\n",
    "        model = M5(n_input=1, n_output=num_classes)\n",
    "        return model\n",
    "\n",
    "    # CNN model initialization\n",
    "    num_classes = 35\n",
    "    device = device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "    model = initialize_model(num_classes)\n",
    "    model = model.to(device)\n",
    "\n",
    "    transform = torchaudio.transforms.Resample(orig_freq=16000, new_freq=8000)\n",
    "    MODEL_PATH = \"./model/m5_multigpu_best_30_epochs.pt\"\n",
    "    model.load_state_dict(torch.load(MODEL_PATH, map_location=device))\n",
    "\n",
    "    custom_set = []\n",
    "    labels = []\n",
    "    path = \"./SpeechCommands/custom/*\"\n",
    "    for file in glob.glob(path):\n",
    "        print(file)\n",
    "        audio = librosa.load(file, sr=16000)\n",
    "        label = os.path.basename(file)[0]\n",
    "        custom_set.append(torch.tensor(audio[0].reshape(1, audio[0].shape[0])))\n",
    "        labels.append(int(label))\n",
    "    \n",
    "    predictions = []\n",
    "    \n",
    "    model.eval()\n",
    "    with torch.no_grad():\n",
    "        for inputs, label in zip(custom_set, labels):\n",
    "            inputs = inputs.reshape((1, inputs.shape[0], inputs.shape[1]))\n",
    "            inputs = inputs.to(device)\n",
    "            inputs = transform(inputs)\n",
    "            \n",
    "            outputs = model(inputs)\n",
    "            _, predicted = torch.max(outputs.flatten(), 0)\n",
    "            predicted = torch.Tensor.cpu(predicted).numpy()\n",
    "            predictions.append(int(predicted))\n",
    "    print(\"label: \", labels)\n",
    "    print(\"predicted: \", predictions)\n",
    "    return [predicted]\n",
    "\n",
    "predict_class()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
